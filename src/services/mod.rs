use diesel::prelude::*;
use diesel::r2d2::{self, ConnectionManager};
use crate::models;
use crate::schema::todos::dsl::*;

pub type DbPool = r2d2::Pool<ConnectionManager<MysqlConnection>>;

pub fn establish_connection_pool() -> DbPool {
    let database_url = std::env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    let manager = ConnectionManager::<MysqlConnection>::new(&database_url);
    r2d2::Pool::builder()
        .build(manager)
        .expect("Failed to create database connection pool")
}

pub fn create_todo(pool: &DbPool, new_todo: models::TodoInput) -> Result<models::Todo, diesel::result::Error> {
    let mut db = pool.get().expect("Couldn't get db connection");
    diesel::insert_into(todos)
        .values(&models::Todo {
            id: 0, // Auto-generated by MySQL
            title: new_todo.title,
            completed: false,
        })
        .execute(&mut *db)?;
    // Fetch the last inserted record using the auto-incremented ID
    let result = todos
        .order(id.desc())
        .first::<models::Todo>(&mut *db)?;
    Ok(result)
}

pub fn get_todos(pool: &DbPool) -> Result<Vec<models::Todo>, diesel::result::Error> {
    let mut db = pool.get().expect("Couldn't get db connection");
    todos.load::<models::Todo>(&mut *db)
}

pub fn get_todo(pool: &DbPool, todo_id: i32) -> Result<Option<models::Todo>, diesel::result::Error> {
    let mut db = pool.get().expect("Couldn't get db connection");
    todos.find(todo_id).first::<models::Todo>(&mut *db).optional()
}

pub fn update_todo(
    pool: &DbPool,
    todo_id: i32,
    new_title: String,
) -> Result<Option<models::Todo>, diesel::result::Error> {
    let mut db = pool.get().expect("Couldn't get db connection");
    diesel::update(todos.find(todo_id))
        .set(title.eq(new_title))
        .execute(&mut *db)?;
    get_todo(pool, todo_id) // Re-fetch the updated record
}

pub fn delete_todo(pool: &DbPool, todo_id: i32) -> Result<usize, diesel::result::Error> {
    let mut db = pool.get().expect("Couldn't get db connection");
    diesel::delete(todos.find(todo_id)).execute(&mut *db)
}

pub mod todo {
    pub use super::{
        establish_connection_pool,
        create_todo,
        get_todos,
        get_todo,
        update_todo,
        delete_todo,
        DbPool,
    };
}